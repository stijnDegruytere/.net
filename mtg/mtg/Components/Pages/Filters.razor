@page "/filter"
@rendermode InteractiveServer
@using mtg.Models
@inject CardService cardService

<div>
    <h3>Filter Cards</h3>

    <!-- Filter by color -->
    <label for="colorFilter">Color:</label>
    <input type="text" id="colorFilter" @bind="colorFilter" placeholder="Enter a color" />

    <!-- Button to trigger filtering -->
    <button @onclick="ApplyFilters">Apply Filters</button>
</div>

<div>
    <h3>Filtered Cards</h3>

    @if (filteredCards != null && filteredCards.Count > 0)
    {
        <ul>
            @foreach (var card in pagedCards)
            {
                <li>@card.Name (@card.Color)</li>
            }
        </ul>

        <!-- Pagination Controls -->
        <div>
            <button @onclick="PreviousPage" disabled="@(!CanGoPrevious())">Previous</button>
            Page @currentPage of @totalPages
            <button @onclick="NextPage" disabled="@(!CanGoNext())">Next</button>
        </div>
    }
    else
    {
        <p>No cards match the filter.</p>
    }
</div>

@code {
    private string colorFilter = "";
    private List<CardModel> filteredCards = new List<CardModel>();
    private List<CardModel> pagedCards = new List<CardModel>();
    private int currentPage = 1;
    private int pageSize = 100;
    private int totalPages = 0;

    private void ApplyFilters()
    {
        // Assuming GetCards() fetches all the cards
        var allCards = GetCards();

        // Filter by color
        filteredCards = allCards
            .Where(card => card.Color.ToLower().Contains(colorFilter.ToLower()))
            .ToList();

        // Calculate total pages
        totalPages = (int)Math.Ceiling((double)filteredCards.Count / pageSize);

        // Load the first page
        LoadPage();
    }

    private void LoadPage()
    {
        // Ensure currentPage is within valid bounds
        if (currentPage < 1) currentPage = 1;
        if (currentPage > totalPages) currentPage = totalPages;

        // Paginate the results
        pagedCards = filteredCards
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void PreviousPage()
    {
        if (CanGoPrevious())
        {
            currentPage--;
            LoadPage();
        }
    }

    private void NextPage()
    {
        if (CanGoNext())
        {
            currentPage++;
            LoadPage();
        }
    }

    private bool CanGoPrevious() => currentPage > 1;
    private bool CanGoNext() => currentPage < totalPages;

    private List<CardModel> GetCards()
    {
        // Dummy data for now, replace this with a call to your service or database
        return new List<CardModel>
        {
            new CardModel(1, "Card 1", "image1.jpg", "Red"),
            new CardModel(2, "Card 2", "image2.jpg", "Blue"),
            new CardModel(3, "Card 3", "image3.jpg", "Green"),
            new CardModel(4, "Card 4", "image4.jpg", "Red"),
            new CardModel(5, "Card 5", "image5.jpg", "Blue"),
            // Add more cards as needed
        };
    }
}
